/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package entryorganizer.gui.entitypanel;

import entryorganizer.Commander;
import entryorganizer.datastorage.DataManager;
import entryorganizer.entities.Entity;
import entryorganizer.entities.EntityType;
import entryorganizer.entities.Field;
import entryorganizer.entities.Link;
import entryorganizer.entities.Text;
import entryorganizer.entities.exception.EntityException;
import entryorganizer.entities.wrappers.Tag;
import entryorganizer.entities.wrappers.Wrapper;
import entryorganizer.gui.Messenger;
import entryorganizer.gui.Resources;
import java.awt.Dimension;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JPopupMenu;

/**
 *
 * @author teopetuk89
 */
public class TagForgePanel extends javax.swing.JPanel {

    /**
     * Creates new form TagForgePanel
     */
    
    
    public interface TagForgeContainer {
        
        public void tagForged(Tag t);
        
        public Messenger getMessenger();
                
    }    
    
    private Tag editedTag;
    private List<Wrapper> links = new ArrayList<Wrapper>();
    private boolean key;
    private TagForgeContainer container;
 //   JPopupMenu popupForgeTag = new JPopupMenu();
    
    private Commander commander;
    private DataManager dataManager;
    
    public TagForgePanel(TagForgeContainer tfc, Commander commander) {
        this.commander = commander;
        this.dataManager = commander.getDataManager();
        this.container = tfc;
        
        initComponents();
        labTag.setIcon(commander.getResources().getImage(Resources.TAG));
        fieldTagName.addKeyListener(new TFKeyListener());
    }
    
    public void reload() {
      //  fieldTagName.setPreferredSize(new Dimension(containerWidth - 19, 19));
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fieldTagName = new javax.swing.JTextField();
        labTag = new javax.swing.JLabel();

        fieldTagName.setText("");

        labTag.setText("jLabel1");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(labTag, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(fieldTagName, javax.swing.GroupLayout.DEFAULT_SIZE, 125, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fieldTagName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labTag)))
        );
    }// </editor-fold>//GEN-END:initComponents

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField fieldTagName;
    private javax.swing.JLabel labTag;
    // End of variables declaration//GEN-END:variables

    public void activate(Tag t) {
        this.editedTag = t;
        fieldTagName.setText(t.getName());
    }
    
    private void forgeTag() {
        String name = fieldTagName.getText();
        Tag result;
        if (editedTag == null) {
            result = dataManager.forgeTag(name);
            
            dataManager.setKey(result.getID().getId(), key);
            for (Wrapper link : links) {
                try {
                    result.setLink(link);
                } catch (EntityException ex) {
                    container.getMessenger().postMessage(ex.getMessage());
                }
            }
        } else {      
            result = editedTag;
            result.setName(name);
        }
        container.tagForged(result);        
        editedTag = null;
        fieldTagName.setText("");
    }

    public void addLink(Wrapper link) {
        this.links.add(link);
    }    

    public void setKey(boolean key) {
        this.key = key;
    }

    @Override
    public void requestFocus() {
        fieldTagName.requestFocus();
    }
    
    private class TFKeyListener implements KeyListener {
        
        public void keyTyped(KeyEvent e) {}
        
        public void keyPressed(KeyEvent e) {
            if (e.getKeyCode() == KeyEvent.VK_ENTER) {
                forgeTag();
            }                
            e.consume();
        }
        
        public void keyReleased(KeyEvent e) {}
    
    }
    
}
