/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package entryorganizer.gui.entitypanel;

import entryorganizer.Commander;
import entryorganizer.datastorage.DataManager;
import entryorganizer.entities.Entity;
import entryorganizer.entities.EntityType;
import entryorganizer.entities.Field;
import entryorganizer.entities.Text;
import entryorganizer.entities.wrappers.Entry;
import entryorganizer.entities.wrappers.Source;
import entryorganizer.gui.CopyPasteMenu;
import entryorganizer.gui.Resources;
import entryorganizer.gui.entitypanel.SourceViewPanel.SourceContainer;
import entryorganizer.gui.searchfield.SourceFindPanel;
import entryorganizer.gui.searchfield.SourceFindPanel.SourceFindContainer;
import java.awt.event.ActionEvent;
import java.awt.event.InputEvent;
import java.awt.event.KeyEvent;
import javax.swing.AbstractAction;
import javax.swing.ActionMap;
import javax.swing.BoxLayout;
import javax.swing.Icon;
import javax.swing.JTextArea;
import javax.swing.KeyStroke;


/**
 *
 * @author teopetuk89
 */
public class EntryForgePanel extends javax.swing.JPanel implements
    SourceFindContainer, SourceContainer {

    private Entry editedEntry;
    private Source source;

    private EntryForgeContainer container;
    private SourceFindPanel sfp;
    private CopyPasteMenu copyPasteMenu = new CopyPasteMenu();

    private Commander commander;
    private DataManager dataManager;
    private Resources resources;
    
    private static final String CREATE = "Создать";
    private static final String SAVE = "Сохранить";

    public interface EntryForgeContainer {
        
        public void entryForged(Entry e, boolean edited);

        public void cancel();

        public void sourceSelected(Source s);

        public Icon cancelIcon();

    }

    /**
     * Creates new form EntryForgePanel
     */
    public EntryForgePanel(EntryForgeContainer container, Commander commander) {
        this.commander = commander;       
        this.resources = commander.getResources();
        this.dataManager = commander.getDataManager();
        initComponents();
        this.container = container;
        panSource.setLayout(new BoxLayout(panSource, BoxLayout.X_AXIS));
        sfp = new SourceFindPanel(commander, this);
        panSource.add(sfp);
        butCreate.setIcon(resources.getImage(Resources.ENTRY));
        butCancel.setIcon(container.cancelIcon());
        
        Object actionKey = new Object();
        KeyStroke tab = KeyStroke.getKeyStroke("TAB");
        ActionMap actionMap = areaContent.getActionMap();
        actionMap.put(actionKey, new AbstractAction("MyFocusAction") {
            @Override
            public void actionPerformed(ActionEvent e) {                
                fieldPageStart.requestFocusInWindow();
            }
        });
        areaContent.getInputMap().put(tab, actionKey);        
    }

    public void activate(Entry e) {
        editedEntry = e;
        if (editedEntry != null) {
            areaContent.setText(editedEntry.getContent(true));
            if (editedEntry.getPageStart() > 0) {
                fieldPageStart.setText("" + editedEntry.getPageStart());
                if (editedEntry.getPageEnd() > 0) {
                    fieldPageEnd.setText("" + editedEntry.getPageEnd());
                }
            }
            sourceFound(e.getSource());
        }
        areaContent.requestFocusInWindow();
    }

    @Override
    public void sourceFound(Source source) {
        this.source = source;
        reloadSource();
    }

    @Override
    public void removeSource(Source source) {
        if (source == source) {
            source = null;
        }
        reloadSource();
    }

    private void reloadSource() {
        if (source == null) {
            panSource.removeAll();
            panSource.add(sfp);
        } else {
            panSource.removeAll();
            sfp.clearInput();
            SourceViewPanel svp = new SourceViewPanel(source, null, commander,
                   this);
            panSource.add(svp);
        }
        validate();
        container.sourceSelected(source);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fieldPageStart = new javax.swing.JTextField();
        fieldPageEnd = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        areaContent = new javax.swing.JTextArea();
        panSource = new javax.swing.JPanel();
        butCreate = new javax.swing.JButton();
        butCancel = new javax.swing.JButton();

        fieldPageStart.setText("");
        fieldPageStart.setMinimumSize(new java.awt.Dimension(30, 19));
        fieldPageStart.setPreferredSize(new java.awt.Dimension(30, 19));
        fieldPageStart.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fieldPageStartKeyPressed(evt);
            }
        });

        fieldPageEnd.setText("");
        fieldPageEnd.setMinimumSize(new java.awt.Dimension(30, 19));
        fieldPageEnd.setPreferredSize(new java.awt.Dimension(30, 19));
        fieldPageEnd.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fieldPageEndKeyPressed(evt);
            }
        });

        jLabel1.setText("страница (окончание)");

        jLabel2.setText("страница");

        areaContent.setColumns(10);
        areaContent.setLineWrap(true);
        areaContent.setRows(5);
        areaContent.setWrapStyleWord(true);
        areaContent.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                areaContentMouseClicked(evt);
            }
        });
        areaContent.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                areaContentKeyPressed(evt);
            }
        });
        jScrollPane2.setViewportView(areaContent);

        javax.swing.GroupLayout panSourceLayout = new javax.swing.GroupLayout(panSource);
        panSource.setLayout(panSourceLayout);
        panSourceLayout.setHorizontalGroup(
            panSourceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 443, Short.MAX_VALUE)
        );
        panSourceLayout.setVerticalGroup(
            panSourceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 20, Short.MAX_VALUE)
        );

        butCreate.setText("");
        butCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butCreateActionPerformed(evt);
            }
        });

        butCancel.setText("");
        butCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butCancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(butCreate, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fieldPageStart, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fieldPageEnd, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(butCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(panSource, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 443, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(butCreate, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panSource, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(butCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fieldPageEnd, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1)
                    .addComponent(fieldPageStart, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void areaContentKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_areaContentKeyPressed
        keyPressed(evt);
    }//GEN-LAST:event_areaContentKeyPressed

    private void fieldPageStartKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fieldPageStartKeyPressed
        keyPressed(evt);
    }//GEN-LAST:event_fieldPageStartKeyPressed

    private void fieldPageEndKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fieldPageEndKeyPressed
        keyPressed(evt);
    }//GEN-LAST:event_fieldPageEndKeyPressed

    private void butCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butCancelActionPerformed
        resetPanel();
    }//GEN-LAST:event_butCancelActionPerformed

    private void butCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butCreateActionPerformed
        forgeEntry();
    }//GEN-LAST:event_butCreateActionPerformed

private void areaContentMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_areaContentMouseClicked
       if (evt.getModifiers() == InputEvent.BUTTON3_MASK) {
           copyPasteMenu.show(areaContent, evt.getX(), evt.getY());
       }
}//GEN-LAST:event_areaContentMouseClicked

    private void keyPressed(KeyEvent evt) {
        if (evt.getKeyCode() == KeyEvent.VK_ENTER &&
                evt.getModifiersEx() == InputEvent.CTRL_DOWN_MASK) {
            forgeEntry();
        }
    }
    
    private void forgeEntry() {
        if (!areaContent.getText().isEmpty()) {
            if (fieldPageStart.getText().isEmpty() || 
                fieldPageStart.getText().matches("[0-9]+")) {
                Entry e;
                boolean edited;
                if (editedEntry != null) {
                    e = editedEntry;
                    e.setContent(areaContent.getText());
                    edited = true;
                } else {
                    e = dataManager.forgeEntry(areaContent.getText());
                    edited = false;
                }
                if (!fieldPageStart.getText().isEmpty()) {
                    int pageStart = Integer.parseInt(fieldPageStart.getText());
                    e.setPageStart(pageStart);
                    if (fieldPageEnd.getText().matches("[0-9]+")) {
                        int pageEnd = Integer.parseInt(fieldPageEnd.getText());
                        e.setPageEnd(pageEnd);
                    }
                } 
                container.entryForged(e, edited);
                resetPanel();
            }
        }
    }
    
    private void resetPanel() {
        editedEntry = null;
        fieldPageEnd.setText("");
        fieldPageStart.setText("");
        areaContent.setText("");
        reloadSource();
        container.cancel();
    }

    @Override
    public void requestFocus() {
        areaContent.requestFocus();
    }
    
    public WrapperPanel getParentPanel() {
        return null;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea areaContent;
    private javax.swing.JButton butCancel;
    private javax.swing.JButton butCreate;
    private javax.swing.JTextField fieldPageEnd;
    private javax.swing.JTextField fieldPageStart;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPanel panSource;
    // End of variables declaration//GEN-END:variables

}
