/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package entryorganizer.gui.entitypanel;

import com.jidesoft.swing.StyledLabel;
import entryorganizer.Commander;
import entryorganizer.entities.exception.EntityException;
import entryorganizer.entities.wrappers.Source;
import entryorganizer.entities.wrappers.Tag;
import entryorganizer.gui.Messenger;
import entryorganizer.gui.Resources;
import entryorganizer.gui.WrapLayout;
import entryorganizer.gui.browser.BrowserManager;
import entryorganizer.gui.browser.CaptionForge;
import entryorganizer.gui.entitypanel.TagViewPanel.TagViewContainer;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.ArrayList;
import java.util.List;
import javax.swing.Box;
import javax.swing.BoxLayout;
import javax.swing.Icon;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.TransferHandler;

/**
 *
 * @author teopetuk89
 */
public class SourceViewPanelExtended extends ExtendedPanel {
 
    public interface SVPEContainer extends ExtendedPanel.Container {
        
        public void forgeSource(Source s);
        
        public void sourceDeleted(SourceViewPanelExtended s);
        
        public void sourceRemoved(SourceViewPanelExtended s);
        
        public void tagRemovedFromPanel(SourceViewPanelExtended panel, Tag tag);
        
        public Messenger getMessenger();
                
    }
    
    private Source source;
    private Resources resources;
    private Commander commander;
    
    private SVPEContainer container;
    private JPopupMenu popupName = new JPopupMenu();
    private TransferHandler transferHandler;
    private List<TagViewPanel> tagPanels = new ArrayList<TagViewPanel>();
    private StyledLabel labName = new StyledLabel();
    private boolean selected;
  
    /**
     * Creates new form SourceViewPanel
     */
    public SourceViewPanelExtended(Source source, SVPEContainer container, 
           Commander commander, BrowserManager manager) {
        super(manager, container);
        this.source = source;    
        this.resources = commander.getResources();
        this.commander = commander;
        this.transferHandler = container.getTransferHandler();
        this.container = container;

        initComponents();
        butSource.setIcon(resources.getImage(Resources.SOURCE));
        butRemove.setIcon(resources.getImage(Resources.REMOVE));

        WrapLayout layout = new WrapLayout(FlowLayout.LEADING);
        panTags.setLayout(layout);
        panLinks.setLayout(new BoxLayout(panLinks, BoxLayout.Y_AXIS));
        this.setTransferHandler(container.getTransferHandler());
        reload();
        labName.addMouseListener(new SourceListener(this));
        labName.setLineWrap(true);
        
    }
    
    public void reload() {         
        int width = container.getSize().width - CaptionForge.TAB_WIDTH;
        this.setMaximumSize(new Dimension(width, Integer.MAX_VALUE));
        
        String text = source.getShortDescription();
        panName.removeAll();
        labName.setText(text);
        panName.add(labName);
        panName.add(Box.createVerticalGlue());
        panName.validate();
        popupName.removeAll();
        StyledLabel labFullName = new StyledLabel();
        labFullName.setText(source.getFullDescription());
        int height = labFullName.getRows() * 25;
        popupName.add(labFullName);
        popupName.setPopupSize(labFullName.getPreferredWidth(), height);
        labName.addMouseListener(new SourceListener(this));

        panTags.removeAll();        
        tagPanels.clear();
        for (Tag t : source.getTags()) {
            TagViewPanel tp = new TagViewPanel();
            tp.initialize(t, commander, browserManager, new TVC(this));
            tp.addMouseListener(container.getMouseListener());
            tp.setTransferHandler(transferHandler);
            panTags.add(tp);
            tagPanels.add(tp);
        }
        
        super.reload();
        if (show) {
            butFold.setIcon(resources.getImage(Resources.FOLD));
        } else {
            butFold.setIcon(resources.getImage(Resources.UNFOLD));            
        }
        
        if (selected) {
            select();
        } else {
            deselect();
        }
                
        validate();
        revalidate();
        repaint();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panSource = new javax.swing.JPanel();
        butSource = new javax.swing.JButton();
        butRemove = new javax.swing.JButton();
        panName = new javax.swing.JPanel();
        filler2 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
        butFold = new javax.swing.JButton();
        panTags = new javax.swing.JPanel();
        linksContainer = new javax.swing.JPanel();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(25, 0), new java.awt.Dimension(25, 0), new java.awt.Dimension(25, 0));
        panLinks = new javax.swing.JPanel();

        setBorder(javax.swing.BorderFactory.createEtchedBorder());
        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.Y_AXIS));

        panSource.setLayout(new javax.swing.BoxLayout(panSource, javax.swing.BoxLayout.X_AXIS));

        butSource.setText("");
        butSource.setMaximumSize(new java.awt.Dimension(16, 16));
        butSource.setMinimumSize(new java.awt.Dimension(16, 16));
        butSource.setPreferredSize(new java.awt.Dimension(16, 16));
        butSource.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butSourceActionPerformed(evt);
            }
        });
        panSource.add(butSource);

        butRemove.setText("");
        butRemove.setMaximumSize(new java.awt.Dimension(16, 16));
        butRemove.setMinimumSize(new java.awt.Dimension(16, 16));
        butRemove.setPreferredSize(new java.awt.Dimension(16, 16));
        butRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butRemoveActionPerformed(evt);
            }
        });
        panSource.add(butRemove);

        panName.setLayout(new javax.swing.BoxLayout(panName, javax.swing.BoxLayout.Y_AXIS));
        panSource.add(panName);
        panSource.add(filler2);

        butFold.setText("");
        butFold.setMaximumSize(new java.awt.Dimension(16, 16));
        butFold.setMinimumSize(new java.awt.Dimension(16, 16));
        butFold.setPreferredSize(new java.awt.Dimension(16, 16));
        butFold.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butFoldActionPerformed(evt);
            }
        });
        panSource.add(butFold);

        add(panSource);

        javax.swing.GroupLayout panTagsLayout = new javax.swing.GroupLayout(panTags);
        panTags.setLayout(panTagsLayout);
        panTagsLayout.setHorizontalGroup(
            panTagsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        panTagsLayout.setVerticalGroup(
            panTagsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 86, Short.MAX_VALUE)
        );

        add(panTags);

        linksContainer.setLayout(new javax.swing.BoxLayout(linksContainer, javax.swing.BoxLayout.X_AXIS));
        linksContainer.add(filler1);

        panLinks.setLayout(new javax.swing.BoxLayout(panLinks, javax.swing.BoxLayout.Y_AXIS));
        linksContainer.add(panLinks);

        add(linksContainer);
    }// </editor-fold>//GEN-END:initComponents

    private void butSourceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butSourceActionPerformed
        container.forgeSource(source);
    }//GEN-LAST:event_butSourceActionPerformed

    private void butRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butRemoveActionPerformed
        container.sourceRemoved(this);
    }//GEN-LAST:event_butRemoveActionPerformed

    private void butFoldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butFoldActionPerformed
        setShow(!show);
        reload();
    }//GEN-LAST:event_butFoldActionPerformed
      
    public Source getSource() {
        return source;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton butFold;
    private javax.swing.JButton butRemove;
    private javax.swing.JButton butSource;
    private javax.swing.Box.Filler filler1;
    private javax.swing.Box.Filler filler2;
    private javax.swing.JPanel linksContainer;
    private javax.swing.JPanel panLinks;
    private javax.swing.JPanel panName;
    private javax.swing.JPanel panSource;
    private javax.swing.JPanel panTags;
    // End of variables declaration//GEN-END:variables

    @Override
    public String getContent() {
        if (source != null) {
            return source.getFullDescription();
        } else {
            return null;
        }
    }

    @Override
    public void select() {
        selected = true;
        this.setBackground(resources.getSelectedColor());
        panSource.setBackground(resources.getSelectedColor());
        panName.setBackground(resources.getSelectedColor());
        panTags.setBackground(resources.getSelectedColor());
        for (TagViewPanel tvp : tagPanels) {
            tvp.select();
        }
    }

    @Override
    public void deselect() {
        selected = false;
        this.setBackground(resources.getDefaultColor());
        panSource.setBackground(resources.getDefaultColor());
        panName.setBackground(resources.getDefaultColor());
        panTags.setBackground(resources.getDefaultColor());
        for (TagViewPanel tvp : tagPanels) {
            tvp.deselect();
        }
    }

    @Override
    public Source getWrapper() {
        return source;
    }
    
    @Override
    public String getField() {
        return container.getField();
    }
    
    public void edit() {
        container.forgeSource(source);
    }

    @Override
    public JPanel getLinksPanel() {
        return panLinks;
    }
    
    private class TVC implements TagViewContainer {
              
        private SourceViewPanelExtended svpe;

        public TVC(SourceViewPanelExtended svpe) {
            this.svpe = svpe;
        }
        
        
        public Icon removerIcon() {
            return resources.getImage(Resources.UNLINK);
        }

        @Override
        public void tagDeleted(Tag t) {                
            
        }

        @Override
        public void editTag(Tag t) {}

        public void tagRemoved(Tag t) {
            source.removeTag(t);
            reload();
            container.tagRemovedFromPanel(svpe, t);
        }

        public boolean canDelete() {
            return false;
        }

        public Messenger getMessenger() {
            return container.getMessenger();
        }

        public String getField() {
            return container.getField();
        }

        public WrapperPanel getParentPanel() {
            return svpe;
        }
        
    }
    
    private class SourceListener implements MouseListener {
        
        private SourceViewPanelExtended panel;

        public SourceListener(SourceViewPanelExtended svpe) {
            this.panel = svpe;
        }
        
        public void mouseClicked(MouseEvent me) {        
            if (me.getSource().equals(labName) || me.getSource().equals(panSource)) {
                me.setSource(panel);
                container.getMouseListener().mouseClicked(me);
            } 
        }

        public void mousePressed(MouseEvent me) {
            if (me.getSource().equals(labName) || me.getSource().equals(panSource)) {
                me.setSource(panel);
                container.getMouseListener().mousePressed(me);
            } 
        }

        public void mouseReleased(MouseEvent me) {}

        public void mouseEntered(MouseEvent me) {
            if (me.getSource().equals(labName)) {
                popupName.show(labName, 0, 15);    
            }            
        }

        public void mouseExited(MouseEvent me) {
            if (me.getSource().equals(labName)) {
                popupName.setVisible(false);    
            }
        }
    }
            
}
