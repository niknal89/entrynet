/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package entryorganizer.gui;

import entryorganizer.gui.browser.Browser;
import entryorganizer.Commander;
import entryorganizer.entities.wrappers.Wrapper;
import entryorganizer.gui.browser.Browser.BrowserContainer;
import java.awt.GraphicsDevice;
import java.awt.GraphicsEnvironment;
import java.awt.KeyEventDispatcher;
import java.awt.KeyboardFocusManager;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ComponentEvent;
import java.awt.event.ComponentListener;
import java.awt.event.InputEvent;
import java.awt.event.KeyEvent;
import java.beans.PropertyVetoException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JDesktopPane;
import javax.swing.JInternalFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.event.InternalFrameEvent;
import javax.swing.event.InternalFrameListener;

/**
 *
 * @author teopetuk89
 */
public class MainFrame extends javax.swing.JFrame implements ActionListener {

    /**
     * Creates new form MainFrame2
     */     
    
     private List<BrowserFrame> browsers = new ArrayList<BrowserFrame>(); 
     private Commander commander;
     private Messenger messenger;
     
     private JDesktopPane desktop;
     private JMenuItem butBackup;
     private JMenuItem butBrowser;
     private JMenuItem butSources;
     
     private JInternalFrame currentFrame;
     private JInternalFrame previousFrame;
     
     
     public MainFrame(Commander commander) {
        this.commander = commander;
        this.messenger = new MainMessenger(this);
        
        GraphicsEnvironment graphEnv = GraphicsEnvironment.getLocalGraphicsEnvironment();
        GraphicsDevice graphDev = graphEnv.getDefaultScreenDevice();
        int screenHeight = graphDev.getDisplayMode().getHeight();
        int screenWidth = graphDev.getDisplayMode().getWidth();
        this.setSize(screenWidth, screenHeight);
        
        KeyboardFocusManager manager = KeyboardFocusManager.getCurrentKeyboardFocusManager();
        manager.addKeyEventDispatcher(new MainFrameDispatcher());
        
        initComponents();
        desktop = new JDesktopPane();
        this.add(desktop);
        desktop.setVisible(true);
        desktop.setSize(screenWidth, screenHeight);
        
        JMenuBar menuBar = new JMenuBar();
        JMenu windows = new JMenu("Окна");
        menuBar.add(windows);        
        butBrowser = new JMenuItem("Проводник");
        butBrowser.addActionListener(this);
        windows.add(butBrowser);
        butSources = new JMenuItem("Список источников");
        butSources.addActionListener(this);
        windows.add(butSources);
        JMenu settings = new JMenu("Настройки");
        menuBar.add(settings);
        butBackup = new JMenuItem("Сделать бэкап");
        butBackup.addActionListener(this);
        settings.add(butBackup);
        this.setJMenuBar(menuBar);
        
        Browser browser = new Browser(commander, new BC(this));  
        forgeBrowserFrame(browser);
    }
     
     private void forgeBrowserFrame(Browser browser) {
        BrowserFrame bf = new BrowserFrame(browser);
        bf.addInternalFrameListener(new IFL());
        bf.addComponentListener(new BrowserListener());
        bf.setVisible(true);
        browsers.add(bf);
        desktop.add(bf);
        bf.moveToFront();
        bf.browser.requestFocus();
     }
             
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1053, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 574, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    @Override
    public void actionPerformed(ActionEvent ae) {
        if (ae.getSource().equals(butBackup)) {
            commander.getDataManager().backup();
        } else if (ae.getSource().equals(butBrowser)) {
            Browser browser = new Browser(commander, new BC(this));  
            forgeBrowserFrame(browser);
        } 
    }
    
    public void openNewBrowser(Wrapper entityToView) {
        Browser browser = new Browser(commander, new BC(this));
        forgeBrowserFrame(browser);
        browser.setViewedElement(entityToView);  
        browser.requestFocus();
    }
    
    private void closeTopFrame() {
        if (desktop.getSelectedFrame() != null) {
            try {
                desktop.getSelectedFrame().setClosed(true);
            } catch (PropertyVetoException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    
    private class BC implements BrowserContainer {

        private MainFrame mainFrame;
        
        private BC(MainFrame mainFrame) {
            this.mainFrame = mainFrame;
        }
        
        public void openNewBrowser(Wrapper w) {
            mainFrame.openNewBrowser(w);
        }

        public Messenger getMessenger() {
            return messenger;
        }

        public void nextBrowser(Browser current) {
            boolean next = false;
            BrowserFrame frame = null;
            for (BrowserFrame frameCheck : browsers) {
                if (next) {
                    frame = frameCheck;
                    next = false;                    
                }
                if (frame.getBrowser().equals(current)) {
                    next = true;
                }
            }
            if (next == true) {
                frame = (browsers.get(0));
            }
            if (frame == null) {
                return;
            }
            frame.moveToFront();
            frame.browser.requestFocus();
        }
        
        public void close(Browser current) {
            BrowserFrame bf = null;
            for (BrowserFrame bfCheck : browsers) {
                if (bf.getBrowser().equals(current)) {
                    bf = bfCheck;
                }
            }
            if (bf != null) {
                try {
                    bf.setClosed(true);
                } catch (PropertyVetoException ex) {
                    Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        
    }
    
    private class MainFrameDispatcher implements KeyEventDispatcher {
        @Override
        public boolean dispatchKeyEvent(KeyEvent e) {
            if (e.getID() == KeyEvent.KEY_PRESSED) {
                if (e.getKeyCode() == KeyEvent.VK_W && 
                        e.getModifiersEx() == InputEvent.CTRL_DOWN_MASK) {
                    closeTopFrame();
                }
            } 
            return false;
        }
    }
     
    private class BrowserListener implements ComponentListener {
         
            @Override
            public void componentResized(ComponentEvent ce) {
               /* if (ce.getComponent() instanceof BrowserFrame) {
                    BrowserFrame bf = (BrowserFrame) ce.getComponent();
                    bf.getBrowser().refresh();
                }*/
            }

            @Override
            public void componentMoved(ComponentEvent ce) {
                
            }

            @Override
            public void componentShown(ComponentEvent ce) {
                
            }

            @Override
            public void componentHidden(ComponentEvent ce) {
                
            }
            
        }
     
    private class BrowserFrame extends JInternalFrame {
         
        private Browser browser;
        
        public BrowserFrame(Browser browser) {
            super("", true, true, true, true);
            this.browser = browser;            
            getContentPane().add(browser);
            pack();
        }

        public Browser getBrowser() {
            return browser;
        }
                 
     }
    
    private class IFL implements InternalFrameListener {
        
        @Override
        public void internalFrameOpened(InternalFrameEvent ife) {}

        @Override
        public void internalFrameClosing(InternalFrameEvent ife) {
        }

        @Override
        public void internalFrameClosed(InternalFrameEvent ife) {
            if (previousFrame != null) {
                try {
                    previousFrame.setSelected(true);
                } catch (PropertyVetoException ex) {
                    Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }

        @Override
        public void internalFrameIconified(InternalFrameEvent ife) {
        }

        @Override
        public void internalFrameDeiconified(InternalFrameEvent ife) {
        }

        @Override
        public void internalFrameActivated(InternalFrameEvent ife) {
            if (ife.getInternalFrame() instanceof BrowserFrame) {
                BrowserFrame bf = (BrowserFrame) ife.getInternalFrame();
                bf.getBrowser().requestFocus();
            }
            previousFrame = currentFrame;
            currentFrame = (BrowserFrame) ife.getInternalFrame();
        }

        @Override
        public void internalFrameDeactivated(InternalFrameEvent ife) {
            }
            
    }
    
    private class MainMessenger implements Messenger {

        private MainFrame parent;
        
        public MainMessenger(MainFrame parent) {
            this.parent = parent;
        }
        
        public void postMessage(String message) {
             JOptionPane.showMessageDialog(rootPane, new JLabel(message));            
        }
        
    }
    
}
