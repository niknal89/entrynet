/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package entryorganizer.gui.forge;

import entryorganizer.Commander;
import entryorganizer.entities.Entity;
import entryorganizer.entities.Link;
import entryorganizer.entities.exception.EntityException;
import entryorganizer.entities.exception.WrongFieldException;
import entryorganizer.entities.wrappers.Wrapper;
import entryorganizer.gui.Resources;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BoxLayout;
import javax.swing.JComponent;

/**
 *
 * @author Администратор
 */
public class LinkPanel extends FieldPanel <Link, Entity> {

    public interface LinkPanelContainer {
        
        public void delete(LinkPanel panel);
        
        public void remove(LinkPanel panel);
        
    }
    
    private Wrapper toLink;    
    private List<FieldPanel> childPanels = new ArrayList<FieldPanel>();
    private LinkPanelContainer container;
    
    /**
     * Creates new form FieldSetPanel
     */
    public LinkPanel(Link link, Commander commander, LinkPanelContainer container) {
        super(link, commander.getDataManager());
        initComponents();
        this.container = container;
        init(link.getName(), commander);
    }
    
    public LinkPanel(String name, Commander commander, LinkPanelContainer container) {
        super(name, commander.getDataManager());
        initComponents();
        this.container = container;
        init(name, commander);
    }
    
    private void init(String name, Commander commander) {
        BoxLayout bl = new BoxLayout(childContainer, BoxLayout.Y_AXIS);
        this.childContainer.setLayout(bl);  
        this.labName.setText(name);
        this.butDelete.setIcon(commander.getResources().getImage(Resources.DELETE));
        this.butRemove.setIcon(commander.getResources().getImage(Resources.REMOVE));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        childContainer = new javax.swing.JPanel();
        labName = new javax.swing.JLabel();
        butDelete = new javax.swing.JButton();
        butRemove = new javax.swing.JButton();

        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout childContainerLayout = new javax.swing.GroupLayout(childContainer);
        childContainer.setLayout(childContainerLayout);
        childContainerLayout.setHorizontalGroup(
            childContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        childContainerLayout.setVerticalGroup(
            childContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 92, Short.MAX_VALUE)
        );

        labName.setText("jLabel1");

        butDelete.setText("");
        butDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butDeleteActionPerformed(evt);
            }
        });

        butRemove.setText("");
        butRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butRemoveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(labName, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 399, Short.MAX_VALUE)
                .addComponent(butRemove, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(butDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(childContainer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(butDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(butRemove, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(childContainer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void butRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butRemoveActionPerformed
        container.remove(this);
    }//GEN-LAST:event_butRemoveActionPerformed

    private void butDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butDeleteActionPerformed
        container.delete(this);
    }//GEN-LAST:event_butDeleteActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton butDelete;
    private javax.swing.JButton butRemove;
    private javax.swing.JPanel childContainer;
    private javax.swing.JLabel labName;
    // End of variables declaration//GEN-END:variables

    @Override
    public void saveField() {
        if (parent == null || toLink == null) 
            return;
        
        if (field != null) {
            parent.removeLink(field.getId(), name);
        } 
        
        try {
            parent.link(toLink, name);
        } catch (EntityException ex) {
            Logger.getLogger(LinkPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    @Override
    public void removeField() {
        if (parent == null || field == null) 
            return;       
        parent.removeLink(field.getId(), name);
    }
    
    @Override
    public void deleteField() {
        if (toLink != null)
            toLink.delete();
        if (field != null) 
            removeField();
    }
    
    @Override
    public Entity getValue() {
        return toLink.getWrapped();
    }

    @Override
    public void requestFocus() {
        if (!childPanels.isEmpty()) {
            childPanels.get(0).requestFocus();
        } else {
            super.requestFocus();
        }
    }
        
    public void setEntityToLink(Wrapper toLink) {
        this.toLink = toLink;
    }     

    public void addChild(JComponent component) {
        if (component instanceof FieldPanel)
            childPanels.add((FieldPanel) component);
        childContainer.add(component);
        childContainer.validate();
    }
    
    public void removeChild(FieldPanel fieldPanel) {
        childPanels.remove(fieldPanel);
        childContainer.remove(fieldPanel);
        validate();
    }
    
    public void removeChildren() {
        childContainer.removeAll();
    }
       
}
